const mongoose = require('mongoose');

const carbonActivitySchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  type: {
    type: String,
    required: true,
    enum: [
      'transportation',
      'energy',
      'food',
      'waste',
      'water',
      'shopping',
      'other'
    ]
  },
  category: {
    type: String,
    required: true,
    enum: [
      // Transportation
      'walk', 'bike', 'public_transport', 'carpool', 'electric_car', 'hybrid_car',
      'avoided_flight', 'telecommute',
      // Energy
      'solar_energy', 'led_bulbs', 'energy_efficient_appliances', 'reduced_heating',
      'reduced_cooling', 'unplugged_devices',
      // Food
      'vegetarian_meal', 'vegan_meal', 'local_food', 'organic_food', 'reduced_meat',
      'composting', 'grow_own_food',
      // Waste
      'recycling', 'reuse', 'reduce_packaging', 'digital_receipts', 'repair_item',
      // Water
      'shorter_shower', 'fix_leak', 'rainwater_harvest', 'efficient_dishwasher',
      // Shopping
      'second_hand', 'sustainable_brands', 'buy_less', 'durable_goods',
      // Other
      'tree_planting', 'education', 'volunteering', 'advocacy'
    ]
  },
  title: {
    type: String,
    required: true,
    maxlength: 100
  },
  description: {
    type: String,
    maxlength: 500
  },
  carbonSaved: {
    type: Number,
    required: true,
    min: 0 // kg CO2 equivalent saved
  },
  metrics: {
    distance: { type: Number }, // km for transportation
    duration: { type: Number }, // minutes
    quantity: { type: Number }, // generic quantity
    unit: { type: String } // unit of measurement
  },
  location: {
    name: String,
    coordinates: {
      type: [Number], // [longitude, latitude]
      index: '2dsphere'
    }
  },
  photos: [{
    url: String,
    caption: String,
    uploadedAt: { type: Date, default: Date.now }
  }],
  tags: [String],
  isPublic: {
    type: Boolean,
    default: true
  },
  verificationStatus: {
    type: String,
    enum: ['pending', 'verified', 'rejected'],
    default: 'pending'
  },
  verificationNote: String,
  likes: [{
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    likedAt: { type: Date, default: Date.now }
  }],
  comments: [{
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    text: { type: String, maxlength: 300 },
    createdAt: { type: Date, default: Date.now }
  }],
  shares: {
    type: Number,
    default: 0
  },
  challenge: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Challenge'
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Indexes
carbonActivitySchema.index({ user: 1, createdAt: -1 });
carbonActivitySchema.index({ type: 1, category: 1 });
carbonActivitySchema.index({ carbonSaved: -1 });
carbonActivitySchema.index({ createdAt: -1 });
carbonActivitySchema.index({ 'location.coordinates': '2dsphere' });

// Virtual for like count
carbonActivitySchema.virtual('likeCount').get(function() {
  return this.likes.length;
});

// Virtual for comment count
carbonActivitySchema.virtual('commentCount').get(function() {
  return this.comments.length;
});

// Static method to get carbon savings by category
carbonActivitySchema.statics.getCarbonSavingsByCategory = async function(userId, dateFrom, dateTo) {
  const matchQuery = { user: userId };
  if (dateFrom && dateTo) {
    matchQuery.createdAt = {
      $gte: new Date(dateFrom),
      $lte: new Date(dateTo)
    };
  }

  return this.aggregate([
    { $match: matchQuery },
    {
      $group: {
        _id: '$category',
        totalCarbonSaved: { $sum: '$carbonSaved' },
        count: { $sum: 1 }
      }
    },
    {
      $project: {
        _id: 0,
        date: {
          $dateFromParts: {
            year: '$_id.year',
            month: '$_id.month',
            day: '$_id.day'
          }
        },
        totalCarbonSaved: 1,
        count: 1
      }
    },
    { $sort: { date: 1 } }
  ]);
};

// Static method to get leaderboard
carbonActivitySchema.statics.getLeaderboard = async function(period = 'month', limit = 10) {
  const startDate = new Date();
  if (period === 'week') {
    startDate.setDate(startDate.getDate() - 7);
  } else if (period === 'month') {
    startDate.setMonth(startDate.getMonth() - 1);
  } else if (period === 'year') {
    startDate.setFullYear(startDate.getFullYear() - 1);
  }

  return this.aggregate([
    {
      $match: {
        createdAt: { $gte: startDate },
        isPublic: true
      }
    },
    {
      $group: {
        _id: '$user',
        totalCarbonSaved: { $sum: '$carbonSaved' },
        activityCount: { $sum: 1 }
      }
    },
    {
      $lookup: {
        from: 'users',
        localField: '_id',
        foreignField: '_id',
        as: 'user'
      }
    },
    { $unwind: '$user' },
    {
      $project: {
        _id: 1,
        totalCarbonSaved: 1,
        activityCount: 1,
        username: '$user.username',
        fullName: '$user.fullName',
        avatar: '$user.avatar',
        level: '$user.stats.level'
      }
    },
    { $sort: { totalCarbonSaved: -1 } },
    { $limit: limit }
  ]);
};

// Method to check if user liked this activity
carbonActivitySchema.methods.isLikedBy = function(userId) {
  return this.likes.some(like => like.user.toString() === userId.toString());
};

// Method to add like
carbonActivitySchema.methods.addLike = function(userId) {
  if (!this.isLikedBy(userId)) {
    this.likes.push({ user: userId });
  }
  return this.save();
};

// Method to remove like
carbonActivitySchema.methods.removeLike = function(userId) {
  this.likes = this.likes.filter(like => like.user.toString() !== userId.toString());
  return this.save();
};

// Method to add comment
carbonActivitySchema.methods.addComment = function(userId, text) {
  this.comments.push({
    user: userId,
    text: text.trim().substring(0, 300)
  });
  return this.save();
};

const CarbonActivity = mongoose.model('CarbonActivity', carbonActivitySchema);

module.exports = CarbonActivity;: '$carbonSaved' },
        count: { $sum: 1 },
        avgCarbonSaved: { $avg: '$carbonSaved' }
      }
    },
    { $sort: { totalCarbonSaved: -1 } }
  ]);
};

// Static method to get daily carbon savings
carbonActivitySchema.statics.getDailyCarbonSavings = async function(userId, days = 30) {
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - days);

  return this.aggregate([
    {
      $match: {
        user: userId,
        createdAt: { $gte: startDate }
      }
    },
    {
      $group: {
        _id: {
          year: { $year: '$createdAt' },
          month: { $month: '$createdAt' },
          day: { $dayOfMonth: '$createdAt' }
        },
        totalCarbonSaved: { $sum